import subprocess
import sys
import os

def install_dependencies():
    print("üîß INSTALLATION DES D√âPENDANCES")
    print("=" * 50)
    
    dependencies = [
        "mysql-connector-python",
        "customtkinter", 
        "requests"
    ]
    
    for dep in dependencies:
        try:
            print(f"Installation de {dep}...")
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", dep
            ], capture_output=True, text=True, check=True)
            print(f"‚úÖ {dep} install√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation de {dep}: {e.stderr}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur inattendue pour {dep}: {e}")
            return False
    
    print("\n‚úÖ Toutes les d√©pendances ont √©t√© install√©es!")
    return True

def check_mysql_config():
    """V√©rifie et guide la configuration MySQL"""
    print("\nüîç V√âRIFICATION DE LA CONFIGURATION MYSQL")
    print("=" * 50)
    
    try:
        import config
        print(f"Host MySQL: {config.DB_HOST}")
        print(f"Port MySQL: {config.DB_PORT}")
        print(f"Utilisateur: {config.DB_USER}")
        print(f"Base de donn√©es: {config.DB_NAME}")
        
        print("\nTest de connexion...")
        try:
            import mysql.connector
            conn = mysql.connector.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                database=config.DB_NAME,
                connect_timeout=10
            )
            conn.close()
            print("‚úÖ Connexion MySQL r√©ussie!")
            return True
        except mysql.connector.Error as e:
            print(f"‚ùå Erreur de connexion MySQL: {e}")
            print("\nüîß SOLUTIONS POSSIBLES:")
            print("1. V√©rifiez que le serveur MySQL est accessible")
            print("2. V√©rifiez les identifiants dans config.py")
            print("3. V√©rifiez que la base de donn√©es existe")
            print("4. V√©rifiez les permissions de l'utilisateur")
            return False
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")
            return False
            
    except ImportError:
        print("‚ùå Fichier config.py non trouv√©")
        return False

def run_diagnostic():
    """Lance le diagnostic complet"""
    print("\nü©∫ DIAGNOSTIC COMPLET")
    print("=" * 50)
    
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from test_mysql_connection import run_full_diagnostic
        
        success = run_full_diagnostic()
        return success
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ INSTALLATION ET CONFIGURATION - G√âN√âRATEUR DE MAILS V2")
    print("=" * 70)
    
    if not install_dependencies():
        print("\n‚ùå √âchec de l'installation des d√©pendances")
        return False
        
    mysql_ok = check_mysql_config()
    
    print("\n" + "=" * 70)
    if mysql_ok:
        print("‚úÖ INSTALLATION R√âUSSIE - MYSQL CONFIGUR√â")
        print("Votre g√©n√©rateur de mails est pr√™t √† utiliser!")
    else:
        print("‚ö†Ô∏è  INSTALLATION R√âUSSIE - MYSQL NON CONFIGUR√â")
        print("Le g√©n√©rateur utilisera le stockage local.")
        print("Consultez la documentation pour configurer MySQL.")
    
    print("\nüéâ PROCESSUS D'INSTALLATION TERMIN√â")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Installation interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'installation: {e}")
        import traceback
        traceback.print_exc()
    
    input("\nAppuyez sur Entr√©e pour fermer...")
